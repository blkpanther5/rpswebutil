'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.1
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection

Namespace Data.SQL.Context
	
	Partial Public Class RolePlayingSystem
		Inherits System.Data.Linq.DataContext
		
		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub InserttblAccount(instance As Data.SQL.Entities.tblAccount)
    End Sub
    Partial Private Sub UpdatetblAccount(instance As Data.SQL.Entities.tblAccount)
    End Sub
    Partial Private Sub DeletetblAccount(instance As Data.SQL.Entities.tblAccount)
    End Sub
    Partial Private Sub InserttblCharacter(instance As Data.SQL.Entities.tblCharacter)
    End Sub
    Partial Private Sub UpdatetblCharacter(instance As Data.SQL.Entities.tblCharacter)
    End Sub
    Partial Private Sub DeletetblCharacter(instance As Data.SQL.Entities.tblCharacter)
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New(Global.RolePlayingSystem.My.MySettings.Default.RolePlayingSystemConnectionString, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public ReadOnly Property tblAccounts() As System.Data.Linq.Table(Of Data.SQL.Entities.tblAccount)
			Get
				Return Me.GetTable(Of Data.SQL.Entities.tblAccount)
			End Get
		End Property
		
		Public ReadOnly Property tblCharacters() As System.Data.Linq.Table(Of Data.SQL.Entities.tblCharacter)
			Get
				Return Me.GetTable(Of Data.SQL.Entities.tblCharacter)
			End Get
		End Property
	End Class
End Namespace

Namespace Data.SQL.Entities
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblAccount")>  _
	Partial Public Class tblAccount
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _GUID As String
		
		Private _Login As String
		
		Private _Password As String
		
		Private _Entered As Date
		
		Private _Revised As Date
		
		Private _tblCharacters As EntitySet(Of tblCharacter)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnGUIDChanging(value As String)
    End Sub
    Partial Private Sub OnGUIDChanged()
    End Sub
    Partial Private Sub OnLoginChanging(value As String)
    End Sub
    Partial Private Sub OnLoginChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnEnteredChanging(value As Date)
    End Sub
    Partial Private Sub OnEnteredChanged()
    End Sub
    Partial Private Sub OnRevisedChanging(value As Date)
    End Sub
    Partial Private Sub OnRevisedChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._tblCharacters = New EntitySet(Of tblCharacter)(AddressOf Me.attach_tblCharacters, AddressOf Me.detach_tblCharacters)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GUID", DbType:="Char(40) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property GUID() As String
			Get
				Return Me._GUID
			End Get
			Set
				If (String.Equals(Me._GUID, value) = false) Then
					Me.OnGUIDChanging(value)
					Me.SendPropertyChanging
					Me._GUID = value
					Me.SendPropertyChanged("GUID")
					Me.OnGUIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Login", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
		Public Property Login() As String
			Get
				Return Me._Login
			End Get
			Set
				If (String.Equals(Me._Login, value) = false) Then
					Me.OnLoginChanging(value)
					Me.SendPropertyChanging
					Me._Login = value
					Me.SendPropertyChanged("Login")
					Me.OnLoginChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
		Public Property Password() As String
			Get
				Return Me._Password
			End Get
			Set
				If (String.Equals(Me._Password, value) = false) Then
					Me.OnPasswordChanging(value)
					Me.SendPropertyChanging
					Me._Password = value
					Me.SendPropertyChanged("Password")
					Me.OnPasswordChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Entered", DbType:="DateTime NOT NULL")>  _
		Public Property Entered() As Date
			Get
				Return Me._Entered
			End Get
			Set
				If ((Me._Entered = value)  _
							= false) Then
					Me.OnEnteredChanging(value)
					Me.SendPropertyChanging
					Me._Entered = value
					Me.SendPropertyChanged("Entered")
					Me.OnEnteredChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Revised", DbType:="DateTime NOT NULL")>  _
		Public Property Revised() As Date
			Get
				Return Me._Revised
			End Get
			Set
				If ((Me._Revised = value)  _
							= false) Then
					Me.OnRevisedChanging(value)
					Me.SendPropertyChanging
					Me._Revised = value
					Me.SendPropertyChanged("Revised")
					Me.OnRevisedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblAccount_tblCharacter", Storage:="_tblCharacters", ThisKey:="GUID", OtherKey:="AccountId")>  _
		Public Property tblCharacters() As EntitySet(Of tblCharacter)
			Get
				Return Me._tblCharacters
			End Get
			Set
				Me._tblCharacters.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_tblCharacters(ByVal entity As tblCharacter)
			Me.SendPropertyChanging
			entity.tblAccount = Me
		End Sub
		
		Private Sub detach_tblCharacters(ByVal entity As tblCharacter)
			Me.SendPropertyChanging
			entity.tblAccount = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblCharacter")>  _
	Partial Public Class tblCharacter
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _GUID As String
		
		Private _AccountId As String
		
		Private _CharacterName As String
		
		Private _CharacterData As String
		
		Private _Entered As Date
		
		Private _Revised As Date
		
		Private _tblAccount As EntityRef(Of tblAccount)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnGUIDChanging(value As String)
    End Sub
    Partial Private Sub OnGUIDChanged()
    End Sub
    Partial Private Sub OnAccountIdChanging(value As String)
    End Sub
    Partial Private Sub OnAccountIdChanged()
    End Sub
    Partial Private Sub OnCharacterNameChanging(value As String)
    End Sub
    Partial Private Sub OnCharacterNameChanged()
    End Sub
    Partial Private Sub OnCharacterDataChanging(value As String)
    End Sub
    Partial Private Sub OnCharacterDataChanged()
    End Sub
    Partial Private Sub OnEnteredChanging(value As Date)
    End Sub
    Partial Private Sub OnEnteredChanged()
    End Sub
    Partial Private Sub OnRevisedChanging(value As Date)
    End Sub
    Partial Private Sub OnRevisedChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._tblAccount = CType(Nothing, EntityRef(Of tblAccount))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GUID", DbType:="Char(40) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property GUID() As String
			Get
				Return Me._GUID
			End Get
			Set
				If (String.Equals(Me._GUID, value) = false) Then
					Me.OnGUIDChanging(value)
					Me.SendPropertyChanging
					Me._GUID = value
					Me.SendPropertyChanged("GUID")
					Me.OnGUIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountId", DbType:="Char(40) NOT NULL", CanBeNull:=false)>  _
		Public Property AccountId() As String
			Get
				Return Me._AccountId
			End Get
			Set
				If (String.Equals(Me._AccountId, value) = false) Then
					If Me._tblAccount.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnAccountIdChanging(value)
					Me.SendPropertyChanging
					Me._AccountId = value
					Me.SendPropertyChanged("AccountId")
					Me.OnAccountIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CharacterName", DbType:="VarChar(25)")>  _
		Public Property CharacterName() As String
			Get
				Return Me._CharacterName
			End Get
			Set
				If (String.Equals(Me._CharacterName, value) = false) Then
					Me.OnCharacterNameChanging(value)
					Me.SendPropertyChanging
					Me._CharacterName = value
					Me.SendPropertyChanged("CharacterName")
					Me.OnCharacterNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CharacterData", DbType:="VarChar(100)")>  _
		Public Property CharacterData() As String
			Get
				Return Me._CharacterData
			End Get
			Set
				If (String.Equals(Me._CharacterData, value) = false) Then
					Me.OnCharacterDataChanging(value)
					Me.SendPropertyChanging
					Me._CharacterData = value
					Me.SendPropertyChanged("CharacterData")
					Me.OnCharacterDataChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Entered", DbType:="DateTime NOT NULL")>  _
		Public Property Entered() As Date
			Get
				Return Me._Entered
			End Get
			Set
				If ((Me._Entered = value)  _
							= false) Then
					Me.OnEnteredChanging(value)
					Me.SendPropertyChanging
					Me._Entered = value
					Me.SendPropertyChanged("Entered")
					Me.OnEnteredChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Revised", DbType:="DateTime NOT NULL")>  _
		Public Property Revised() As Date
			Get
				Return Me._Revised
			End Get
			Set
				If ((Me._Revised = value)  _
							= false) Then
					Me.OnRevisedChanging(value)
					Me.SendPropertyChanging
					Me._Revised = value
					Me.SendPropertyChanged("Revised")
					Me.OnRevisedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblAccount_tblCharacter", Storage:="_tblAccount", ThisKey:="AccountId", OtherKey:="GUID", IsForeignKey:=true)>  _
		Public Property tblAccount() As tblAccount
			Get
				Return Me._tblAccount.Entity
			End Get
			Set
				Dim previousValue As tblAccount = Me._tblAccount.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._tblAccount.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._tblAccount.Entity = Nothing
						previousValue.tblCharacters.Remove(Me)
					End If
					Me._tblAccount.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.tblCharacters.Add(Me)
						Me._AccountId = value.GUID
					Else
						Me._AccountId = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("tblAccount")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
End Namespace
